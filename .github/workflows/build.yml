name: build
on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'ci-trigger.txt'
      - '.github/workflows/build.yml'
env:
  FLUTTER_CHANNEL: stable
jobs:
  android-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
          java-version: '17'
      - run: flutter pub get
      - run: flutter build appbundle --release --target-platform=android-arm64
      - run: flutter build apk --release --target-platform=android-arm64 --split-per-abi
      - name: Collect android arm64 artifacts
        run: |
          set -euxo pipefail
          mkdir -p dist/android-arm64
          AAB=$(ls -1 build/app/outputs/bundle/release/*.aab | head -n1)
          cp "$AAB" dist/android-arm64/
          APKS=$(find build/app/outputs/flutter-apk -maxdepth 1 -type f -name '*arm64*.apk')
          if [ -z "$APKS" ]; then
            echo "No arm64 APK produced" >&2
            exit 1
          fi
          while IFS= read -r APK; do
            cp "$APK" dist/android-arm64/
          done <<< "$APKS"
      - name: Upload android dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-android-arm64
          path: dist/android-arm64/**
          if-no-files-found: error

  linux-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - run: sudo apt-get update && sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libkeybinder-3.0-0 libkeybinder-3.0-dev
      - run: flutter config --enable-linux-desktop
      - run: flutter pub get
      - run: flutter build linux --release
      - name: Package linux amd64 artifacts
        run: |
          set -euxo pipefail
          mkdir -p dist/linux-amd64
          tar -C build/linux/x64/release/bundle -czf dist/linux-amd64/app-linux-amd64.tar.gz .
      - name: Upload linux dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux-amd64
          path: dist/linux-amd64/**
          if-no-files-found: error

  windows-amd64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      - run: flutter build windows --release
      - name: Package windows amd64 artifacts
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          $source = "build/windows/x64/runner/Release"
          if (!(Test-Path $source)) { throw "Missing Windows release directory: $source" }
          Compress-Archive -Path "$source/*" -DestinationPath "build/app-windows-amd64.zip" -Force
          New-Item -ItemType Directory -Path "dist/windows-amd64" -Force | Out-Null
          Move-Item "build/app-windows-amd64.zip" "dist/windows-amd64/app-windows-amd64.zip" -Force
      - name: Upload windows dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-windows-amd64
          path: dist/windows-amd64/**
          if-no-files-found: error

  macos-arm64:
    runs-on: macos-14  # Apple Silicon runner to produce arm64 binaries
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - run: flutter config --enable-macos-desktop
      - run: flutter pub get
      - run: flutter build macos --release
      - name: Package macOS arm64 artifacts
        run: |
          set -euxo pipefail
          APP_PATH=$(ls -1 build/macos/Build/Products/Release/*.app | head -n1)
          APP_NAME=$(basename "$APP_PATH" .app)
          mkdir -p build/dmgroot dist/macos-arm64
          cp -R "$APP_PATH" build/dmgroot/
          ln -s /Applications build/dmgroot/Applications || true
          DMG="dist/macos-arm64/${APP_NAME}-macos-arm64.dmg"
          hdiutil create -volname "$APP_NAME" -srcfolder build/dmgroot -ov -format UDZO "$DMG"
      - name: Upload macOS dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-macos-arm64
          path: dist/macos-arm64/**
          if-no-files-found: error

  collect-artifacts:
    runs-on: ubuntu-latest
    needs:
      - android-arm64
      - linux-amd64
      - windows-amd64
      - macos-arm64
    steps:
      - name: Download android dist
        uses: actions/download-artifact@v4
        with:
          name: dist-android-arm64
          path: .
      - name: Download linux dist
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-amd64
          path: .
      - name: Download windows dist
        uses: actions/download-artifact@v4
        with:
          name: dist-windows-amd64
          path: .
      - name: Download macOS dist
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-arm64
          path: .
      - name: List collected dist contents
        run: |
          set -euxo pipefail
          echo "::group::DIST-LIST"
          if [ ! -d dist ]; then
            echo "dist directory missing after downloads" >&2
            exit 1
          fi
          ls -lR dist
          echo "::endgroup::"
      - name: Upload consolidated build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/**
          if-no-files-found: error
