name: release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: Git tag to build (e.g. v0.1.0)
        required: true
        type: string

permissions:
  contents: write
  actions: write

concurrency:
  group: release-${{ inputs.tag }}
  cancel-in-progress: true

env:
  FLUTTER_CHANNEL: stable
  TAG: ${{ inputs.tag }}

jobs:
  android-arm64:
    name: android-arm64
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.out.outputs.success }}
      artifact: ${{ steps.out.outputs.artifact }}
      root_cause: ${{ steps.out.outputs.root_cause }}
      fix_hint: ${{ steps.out.outputs.fix_hint }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
          java-version: '17'
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
      - name: Build core lib for android arm64
        run: |
          set -euxo pipefail
          mkdir -p libclash/android/arm64-v8a
          HOST=$(uname -s | tr '[:upper:]' '[:lower:]')
          if [ "$HOST" = "darwin" ]; then HOST=darwin-x86_64; else HOST=linux-x86_64; fi
          export CGO_ENABLED=1
          export GOOS=android
          export GOARCH=arm64
          export CC="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/$HOST/bin/aarch64-linux-android21-clang"
          (cd core && go build -ldflags=-w -s -tags=with_gvisor -buildmode=c-shared -o ../libclash/android/arm64-v8a/libclash.so)
          test -f libclash/android/arm64-v8a/libclash.so
          test -f libclash/android/arm64-v8a/libclash.h
      - run: flutter pub get
      - run: flutter build appbundle --release --target-platform=android-arm64
      - run: flutter build apk --release --target-platform=android-arm64 --split-per-abi
      - name: Package android arm64 artifacts
        run: |
          set -euxo pipefail
          mkdir -p build/artifacts
          AAB=$(ls -1 build/app/outputs/bundle/release/*.aab | head -n1)
          APK=$(ls -1 build/app/outputs/flutter-apk/*arm64-v8a*.apk 2>/dev/null | head -n1 || true)
          if [ -z "$APK" ]; then APK=$(ls -1 build/app/outputs/flutter-apk/*arm64*.apk | head -n1); fi
          cp "$AAB" build/artifacts/
          cp "$APK" build/artifacts/
          (cd build/artifacts && zip -9 -r ../android-arm64.zip .)
      - uses: actions/upload-artifact@v4
        with:
          name: android-arm64
          path: build/android-arm64.zip
          if-no-files-found: error
      - id: out
        if: always()
        run: |
          set -euo pipefail
          ART="build/android-arm64.zip"
          if [ -s "$ART" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
            echo "root_cause=artifact missing or zero size after build" >> $GITHUB_OUTPUT
            echo "fix_hint=verify APK glob and AAB path; ensure NDK CC and go build succeeded" >> $GITHUB_OUTPUT
          fi

  linux-amd64:
    name: linux-amd64
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.out.outputs.success }}
      artifact: ${{ steps.out.outputs.artifact }}
      root_cause: ${{ steps.out.outputs.root_cause }}
      fix_hint: ${{ steps.out.outputs.fix_hint }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - run: sudo apt-get update && sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libkeybinder-3.0-0 libkeybinder-3.0-dev
      - run: flutter config --enable-linux-desktop
      - run: flutter pub get
      - name: Build core for linux amd64
        run: |
          set -euxo pipefail
          mkdir -p libclash/linux
          export CGO_ENABLED=0
          export GOOS=linux
          export GOARCH=amd64
          (cd core && go build -ldflags=-w -s -tags=with_gvisor -o ../libclash/linux/FlClashCore)
          test -x libclash/linux/FlClashCore || chmod +x libclash/linux/FlClashCore
      - run: flutter build linux --release
      - run: tar -C build/linux/x64/release/bundle -czf build/linux-amd64.tar.gz .
      - uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: build/linux-amd64.tar.gz
          if-no-files-found: error
      - id: out
        if: always()
        run: |
          set -euo pipefail
          ART="build/linux-amd64.tar.gz"
          if [ -s "$ART" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
            echo "root_cause=artifact missing or zero size after build" >> $GITHUB_OUTPUT
            echo "fix_hint=verify linux bundle path; ensure core binary exists at libclash/linux/FlClashCore" >> $GITHUB_OUTPUT
          fi

  windows-amd64:
    name: windows-amd64
    runs-on: windows-latest
    outputs:
      success: ${{ steps.out.outputs.success }}
      artifact: ${{ steps.out.outputs.artifact }}
      root_cause: ${{ steps.out.outputs.root_cause }}
      fix_hint: ${{ steps.out.outputs.fix_hint }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      - name: Build core and helper for windows amd64
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'
          if (!(Test-Path libclash/windows)) { New-Item -ItemType Directory libclash/windows | Out-Null }
          $env:CGO_ENABLED = '0'
          $env:GOOS = 'windows'
          $env:GOARCH = 'amd64'
          Push-Location core
          go build -ldflags="-w -s" -tags=with_gvisor -o ../libclash/windows/FlClashCore.exe
          Pop-Location
          Push-Location services/helper
          cargo build --release --features windows-service
          Pop-Location
          Copy-Item services/helper/target/release/helper.exe libclash/windows/FlClashHelperService.exe -Force
          if (!(Test-Path libclash/windows/FlClashCore.exe)) { throw 'missing FlClashCore.exe' }
          if (!(Test-Path libclash/windows/FlClashHelperService.exe)) { throw 'missing FlClashHelperService.exe' }
      - run: flutter build windows --release
      - shell: pwsh
        run: |
          cd build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath ../../../windows-amd64.zip
      - uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: build/windows-amd64.zip
          if-no-files-found: error
      - id: out
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          ART="build/windows-amd64.zip"
          if [ -s "$ART" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
            echo "root_cause=artifact missing or zero size after build" >> $GITHUB_OUTPUT
            echo "fix_hint=verify Release output path and helper exe copy; ensure go/cargo builds succeeded" >> $GITHUB_OUTPUT
          fi

  macos-arm64:
    name: macos-arm64
    runs-on: macos-14
    outputs:
      success: ${{ steps.out.outputs.success }}
      artifact: ${{ steps.out.outputs.artifact }}
      root_cause: ${{ steps.out.outputs.root_cause }}
      fix_hint: ${{ steps.out.outputs.fix_hint }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - run: flutter config --enable-macos-desktop
      - run: flutter pub get
      - name: Build core for macos arm64
        run: |
          set -euxo pipefail
          mkdir -p libclash/macos
          export CGO_ENABLED=0
          export GOOS=darwin
          export GOARCH=arm64
          (cd core && go build -ldflags=-w -s -tags=with_gvisor -o ../libclash/macos/FlClashCore)
          test -x libclash/macos/FlClashCore || chmod +x libclash/macos/FlClashCore
      - run: flutter build macos --release
      - name: Create DMG
        run: |
          APP_PATH=$(ls -1 build/macos/Build/Products/Release/*.app | head -n1)
          APP_NAME=$(basename "$APP_PATH" .app)
          DMG="build/macos-arm64.dmg"
          mkdir -p build/dmgroot
          cp -R "$APP_PATH" build/dmgroot/
          ln -s /Applications build/dmgroot/Applications || true
          hdiutil create -volname "$APP_NAME" -srcfolder build/dmgroot -ov -format UDZO "$DMG"
      - uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: build/macos-arm64.dmg
          if-no-files-found: error
      - id: out
        if: always()
        run: |
          set -euo pipefail
          ART="build/macos-arm64.dmg"
          if [ -s "$ART" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "artifact=$ART" >> $GITHUB_OUTPUT
            echo "root_cause=artifact missing or zero size after build" >> $GITHUB_OUTPUT
            echo "fix_hint=verify .app path; ensure hdiutil created DMG successfully on arm64 runner" >> $GITHUB_OUTPUT
          fi

  verify:
    name: verify
    runs-on: ubuntu-latest
    needs: [android-arm64, linux-amd64, windows-amd64, macos-arm64]
    outputs:
      passed: ${{ steps.result.outputs.passed }}
      missing: ${{ steps.result.outputs.missing }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Validate artifacts and print sha256
        id: result
        run: |
          set -euo pipefail
          ls -R dist || true
          missing=()
          files=(
            dist/android-arm64/android-arm64.zip
            dist/windows-amd64/windows-amd64.zip
            dist/macos-arm64/macos-arm64.dmg
            dist/linux-amd64/linux-amd64.tar.gz
          )
          for f in "${files[@]}"; do
            if [ ! -s "$f" ]; then
              echo "MISSING: $f"
              missing+=("$f")
            else
              echo "OK: $f"
              sha256sum "$f" || shasum -a 256 "$f" || true
              ls -l "$f"
            fi
          done
          if [ ${#missing[@]} -eq 0 ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "missing=[]" >> $GITHUB_OUTPUT
          else
            printf 'passed=false\n' >> $GITHUB_OUTPUT
            printf 'missing=%s\n' "${missing[*]}" >> $GITHUB_OUTPUT
          fi

  self-heal:
    name: self-heal
    runs-on: ubuntu-latest
    needs: [verify]
    if: needs.verify.outputs.passed != 'true' && github.run_attempt < 3
    steps:
      - name: Print plan
        run: |
          echo "Attempt: $GITHUB_RUN_ATTEMPT"
          echo "Missing: ${{ needs.verify.outputs.missing }}"
          echo "Will apply minimal patch and re-dispatch run"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Apply minimal patch for robustness
        run: |
          set -euo pipefail
          sed -i.bak 's/*arm64-v8a\*.apk/*arm64\*.apk/g' .github/workflows/release.yml || true
          git config user.email "actions@github"
          git config user.name "GitHub Actions"
          git commit -am "ci(release): self-heal fallback patterns" || echo "no changes"
          git push origin HEAD
      - name: Re-dispatch this workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.request('POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'main',
              inputs: { tag: process.env.TAG }
            })

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [verify]
    if: needs.verify.outputs.passed == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Build release notes
        run: |
          set -euo pipefail
          {
            echo "Files:";
            for f in \
              dist/android-arm64/android-arm64.zip \
              dist/windows-amd64/windows-amd64.zip \
              dist/macos-arm64/macos-arm64.dmg \
              dist/linux-amd64/linux-amd64.tar.gz; do
              sz=$(stat -c %s "$f" 2>/dev/null || stat -f %z "$f")
              sh=$(sha256sum "$f" 2>/dev/null | awk '{print $1}' || shasum -a 256 "$f" | awk '{print $1}')
              echo "- $(basename "$f"): size=$sz sha256=$sh"
            done
          } > RELEASE_NOTES.md
          cat RELEASE_NOTES.md
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/android-arm64/android-arm64.zip
            dist/windows-amd64/windows-amd64.zip
            dist/macos-arm64/macos-arm64.dmg
            dist/linux-amd64/linux-amd64.tar.gz
          generate_release_notes: true
          fail_on_unmatched_files: true
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  file-issue:
    name: file-issue
    runs-on: ubuntu-latest
    needs: [verify]
    if: needs.verify.outputs.passed != 'true' && github.run_attempt >= 3
    steps:
      - name: Open issue for failed release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `Release failed for ${process.env.TAG}`;
            const body = `Release verification failed after 3 attempts.\nMissing artifacts: ${'${{ needs.verify.outputs.missing }}'}\nPlease inspect job logs for platform-specific errors and consider updating the workflow accordingly.`;
            await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title, body });

